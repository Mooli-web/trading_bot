# AI Reinforcement Learning Trading Bot

This project is a sophisticated, fully autonomous trading bot for the Forex market, leveraging a hybrid AI approach that combines Evolutionary Algorithms for hyperparameter optimization and Deep Reinforcement Learning (DRL) for generating trading signals.
The core is built for performance and robustness, featuring a high-speed backtesting engine written in **Rust** and a rigorous **Walk-Forward Validation** methodology to prevent overfitting and ensure strategies are viable in live market conditions.
---

## Key Features

- **Hybrid AI Core**: Uses an Evolutionary Algorithm to discover the best hyperparameters for a `RecurrentPPO` agent from the Stable-Baselines3-Contrib library.
This automates the most challenging part of ML model tuning.
- **High-Performance Rust Engine**: The entire trading environment and backtesting logic is implemented in Rust, enabling massive speedups in training and evaluation compared to a pure Python implementation.
- **Robust Walk-Forward Validation**: Instead of a simple train/test split, the project employs a rigorous Walk-Forward methodology.
The model is trained on a period of data, validated on the next, and this window slides forward in time, closely simulating real-world trading.
- **Advanced Feature Engineering**: The bot doesn't just look at price.
It uses a rich set of features to understand market context, including:
    - **Market Regime Detection**: Indicators like ADX and Bollinger Band Width help the agent differentiate between trending and ranging markets.
- **Price Context**: Donchian Channels provide context on where the current price is relative to its recent trading range.
- **Live Trading Ready**: Includes a robust `live_server.py` with state persistence and data gap detection to handle real-world connection interruptions, and a `Data_Forwarder.py` script to link with a MetaTrader 5 Expert Advisor.
- **Comprehensive CSV-Based Monitoring**: The training process generates detailed CSV logs for strategic (generation-level) and tactical (signal-level) performance analysis, allowing for in-depth, post-hoc evaluation of agent behavior and effectiveness.
---

## How to Use

### 1. Prerequisites
- Python 3.9+
- Rust toolchain (for compiling the environment)
- An account with a MetaTrader 5 broker.
### 2. Installation

1.  **Clone the repository:**
    ```bash
    git clone <your-repository-url>
    cd <repository-folder>
    ```

2.  **Create and activate a virtual environment (recommended):**
    ```bash
    python -m venv venv
    source venv/bin/activate  # On Windows: venv\Scripts\activate
    ```

3.  **Install Python dependencies:**
    ```bash
    pip install -r requirements.txt
    ```

4.  **Compile the Rust environment:**
    This project uses `maturin` to build the Rust library so Python can use it.
```bash
    maturin develop
    ```

5.  **Configure your MT5 Credentials:**
    - Copy the `.env.example` file to `.env`.
- Open the new `.env` file and enter your MetaTrader 5 account login, password, and server name.
### 3. Running the Training Pipeline

To start the full training process from scratch, run the `main.py` script:
```bash
python main.py